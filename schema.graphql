# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  username: String
  email: String
  password: PasswordState
  avatar: Image
  links(where: LinkWhereInput! = {}, orderBy: [LinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LinkWhereUniqueInput): [Link!]
  linksCount(where: LinkWhereInput! = {}): Int
  createdAt: DateTime
  isAdmin: Boolean
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  ownedTags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  ownedTagsCount(where: TagWhereInput! = {}): Int
  ownedImages(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ImageWhereUniqueInput): [Image!]
  ownedImagesCount(where: ImageWhereInput! = {}): Int
  ownedFiles(where: FileWhereInput! = {}, orderBy: [FileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FileWhereUniqueInput): [File!]
  ownedFilesCount(where: FileWhereInput! = {}): Int
  ownedContents(where: ContentWhereInput! = {}, orderBy: [ContentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContentWhereUniqueInput): [Content!]
  ownedContentsCount(where: ContentWhereInput! = {}): Int
  ownedSkills(where: SkillWhereInput! = {}, orderBy: [SkillOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SkillWhereUniqueInput): [Skill!]
  ownedSkillsCount(where: SkillWhereInput! = {}): Int
  ownedLinks(where: LinkWhereInput! = {}, orderBy: [LinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LinkWhereUniqueInput): [Link!]
  ownedLinksCount(where: LinkWhereInput! = {}): Int
  ownedAboutMe: AboutMe
  ownedSkillCategories(where: SkillCategoryWhereInput! = {}, orderBy: [SkillCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SkillCategoryWhereUniqueInput): [SkillCategory!]
  ownedSkillCategoriesCount(where: SkillCategoryWhereInput! = {}): Int
  ownedContentCategories(where: ContentCategoryWhereInput! = {}, orderBy: [ContentCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContentCategoryWhereUniqueInput): [ContentCategory!]
  ownedContentCategoriesCount(where: ContentCategoryWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  username: StringFilter
  email: StringFilter
  avatar: ImageWhereInput
  links: LinkManyRelationFilter
  createdAt: DateTimeNullableFilter
  isAdmin: BooleanFilter
  posts: PostManyRelationFilter
  ownedTags: TagManyRelationFilter
  ownedImages: ImageManyRelationFilter
  ownedFiles: FileManyRelationFilter
  ownedContents: ContentManyRelationFilter
  ownedSkills: SkillManyRelationFilter
  ownedLinks: LinkManyRelationFilter
  ownedAboutMe: AboutMeWhereInput
  ownedSkillCategories: SkillCategoryManyRelationFilter
  ownedContentCategories: ContentCategoryManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input LinkManyRelationFilter {
  every: LinkWhereInput
  some: LinkWhereInput
  none: LinkWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input ImageManyRelationFilter {
  every: ImageWhereInput
  some: ImageWhereInput
  none: ImageWhereInput
}

input FileManyRelationFilter {
  every: FileWhereInput
  some: FileWhereInput
  none: FileWhereInput
}

input ContentManyRelationFilter {
  every: ContentWhereInput
  some: ContentWhereInput
  none: ContentWhereInput
}

input SkillManyRelationFilter {
  every: SkillWhereInput
  some: SkillWhereInput
  none: SkillWhereInput
}

input SkillCategoryManyRelationFilter {
  every: SkillCategoryWhereInput
  some: SkillCategoryWhereInput
  none: SkillCategoryWhereInput
}

input ContentCategoryManyRelationFilter {
  every: ContentCategoryWhereInput
  some: ContentCategoryWhereInput
  none: ContentCategoryWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  username: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
  isAdmin: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  username: String
  email: String
  password: String
  avatar: ImageRelateToOneForUpdateInput
  links: LinkRelateToManyForUpdateInput
  createdAt: DateTime
  isAdmin: Boolean
  posts: PostRelateToManyForUpdateInput
  ownedTags: TagRelateToManyForUpdateInput
  ownedImages: ImageRelateToManyForUpdateInput
  ownedFiles: FileRelateToManyForUpdateInput
  ownedContents: ContentRelateToManyForUpdateInput
  ownedSkills: SkillRelateToManyForUpdateInput
  ownedLinks: LinkRelateToManyForUpdateInput
  ownedAboutMe: AboutMeRelateToOneForUpdateInput
  ownedSkillCategories: SkillCategoryRelateToManyForUpdateInput
  ownedContentCategories: ContentCategoryRelateToManyForUpdateInput
}

input ImageRelateToOneForUpdateInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
  disconnect: Boolean
}

input LinkRelateToManyForUpdateInput {
  disconnect: [LinkWhereUniqueInput!]
  set: [LinkWhereUniqueInput!]
  create: [LinkCreateInput!]
  connect: [LinkWhereUniqueInput!]
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input ImageRelateToManyForUpdateInput {
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input FileRelateToManyForUpdateInput {
  disconnect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  create: [FileCreateInput!]
  connect: [FileWhereUniqueInput!]
}

input ContentRelateToManyForUpdateInput {
  disconnect: [ContentWhereUniqueInput!]
  set: [ContentWhereUniqueInput!]
  create: [ContentCreateInput!]
  connect: [ContentWhereUniqueInput!]
}

input SkillRelateToManyForUpdateInput {
  disconnect: [SkillWhereUniqueInput!]
  set: [SkillWhereUniqueInput!]
  create: [SkillCreateInput!]
  connect: [SkillWhereUniqueInput!]
}

input AboutMeRelateToOneForUpdateInput {
  create: AboutMeCreateInput
  connect: AboutMeWhereUniqueInput
  disconnect: Boolean
}

input SkillCategoryRelateToManyForUpdateInput {
  disconnect: [SkillCategoryWhereUniqueInput!]
  set: [SkillCategoryWhereUniqueInput!]
  create: [SkillCategoryCreateInput!]
  connect: [SkillCategoryWhereUniqueInput!]
}

input ContentCategoryRelateToManyForUpdateInput {
  disconnect: [ContentCategoryWhereUniqueInput!]
  set: [ContentCategoryWhereUniqueInput!]
  create: [ContentCategoryCreateInput!]
  connect: [ContentCategoryWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  username: String
  email: String
  password: String
  avatar: ImageRelateToOneForCreateInput
  links: LinkRelateToManyForCreateInput
  createdAt: DateTime
  isAdmin: Boolean
  posts: PostRelateToManyForCreateInput
  ownedTags: TagRelateToManyForCreateInput
  ownedImages: ImageRelateToManyForCreateInput
  ownedFiles: FileRelateToManyForCreateInput
  ownedContents: ContentRelateToManyForCreateInput
  ownedSkills: SkillRelateToManyForCreateInput
  ownedLinks: LinkRelateToManyForCreateInput
  ownedAboutMe: AboutMeRelateToOneForCreateInput
  ownedSkillCategories: SkillCategoryRelateToManyForCreateInput
  ownedContentCategories: ContentCategoryRelateToManyForCreateInput
}

input ImageRelateToOneForCreateInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
}

input LinkRelateToManyForCreateInput {
  create: [LinkCreateInput!]
  connect: [LinkWhereUniqueInput!]
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input ImageRelateToManyForCreateInput {
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input FileRelateToManyForCreateInput {
  create: [FileCreateInput!]
  connect: [FileWhereUniqueInput!]
}

input ContentRelateToManyForCreateInput {
  create: [ContentCreateInput!]
  connect: [ContentWhereUniqueInput!]
}

input SkillRelateToManyForCreateInput {
  create: [SkillCreateInput!]
  connect: [SkillWhereUniqueInput!]
}

input AboutMeRelateToOneForCreateInput {
  create: AboutMeCreateInput
  connect: AboutMeWhereUniqueInput
}

input SkillCategoryRelateToManyForCreateInput {
  create: [SkillCategoryCreateInput!]
  connect: [SkillCategoryWhereUniqueInput!]
}

input ContentCategoryRelateToManyForCreateInput {
  create: [ContentCategoryCreateInput!]
  connect: [ContentCategoryWhereUniqueInput!]
}

type AboutMe {
  id: ID!
  title: String
  subtitle: String
  intro: String
  bio: String
  name: String
  nameEn: String
  siteTitle: String
  siteTitleEn: String
  url: String
  twitter: String
  github: String
  facebook: String
  linkedin: String
  instagram: String
  owner: User
}

input AboutMeWhereUniqueInput {
  id: ID
}

input AboutMeWhereInput {
  AND: [AboutMeWhereInput!]
  OR: [AboutMeWhereInput!]
  NOT: [AboutMeWhereInput!]
  id: IDFilter
  title: StringFilter
  subtitle: StringFilter
  intro: StringFilter
  bio: StringFilter
  name: StringFilter
  nameEn: StringFilter
  siteTitle: StringFilter
  siteTitleEn: StringFilter
  url: StringFilter
  twitter: StringFilter
  github: StringFilter
  facebook: StringFilter
  linkedin: StringFilter
  instagram: StringFilter
  owner: UserWhereInput
}

input AboutMeOrderByInput {
  id: OrderDirection
  title: OrderDirection
  subtitle: OrderDirection
  intro: OrderDirection
  bio: OrderDirection
  name: OrderDirection
  nameEn: OrderDirection
  siteTitle: OrderDirection
  siteTitleEn: OrderDirection
  url: OrderDirection
  twitter: OrderDirection
  github: OrderDirection
  facebook: OrderDirection
  linkedin: OrderDirection
  instagram: OrderDirection
}

input AboutMeUpdateInput {
  title: String
  subtitle: String
  intro: String
  bio: String
  name: String
  nameEn: String
  siteTitle: String
  siteTitleEn: String
  url: String
  twitter: String
  github: String
  facebook: String
  linkedin: String
  instagram: String
  owner: UserRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input AboutMeUpdateArgs {
  where: AboutMeWhereUniqueInput!
  data: AboutMeUpdateInput!
}

input AboutMeCreateInput {
  title: String
  subtitle: String
  intro: String
  bio: String
  name: String
  nameEn: String
  siteTitle: String
  siteTitleEn: String
  url: String
  twitter: String
  github: String
  facebook: String
  linkedin: String
  instagram: String
  owner: UserRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Post {
  id: ID!
  title: String
  content: Post_content_Document
  markdown: String
  files(where: FileWhereInput! = {}, orderBy: [FileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FileWhereUniqueInput): [File!]
  filesCount(where: FileWhereInput! = {}): Int
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ImageWhereUniqueInput): [Image!]
  imagesCount(where: ImageWhereInput! = {}): Int
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  markdown: StringFilter
  files: FileManyRelationFilter
  images: ImageManyRelationFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  markdown: OrderDirection
}

input PostUpdateInput {
  title: String
  content: JSON
  markdown: String
  files: FileRelateToManyForUpdateInput
  images: ImageRelateToManyForUpdateInput
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: JSON
  markdown: String
  files: FileRelateToManyForCreateInput
  images: ImageRelateToManyForCreateInput
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  contents(where: ContentWhereInput! = {}, orderBy: [ContentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContentWhereUniqueInput): [Content!]
  contentsCount(where: ContentWhereInput! = {}): Int
  skills(where: SkillWhereInput! = {}, orderBy: [SkillOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SkillWhereUniqueInput): [Skill!]
  skillsCount(where: SkillWhereInput! = {}): Int
  owner: User
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
  contents: ContentManyRelationFilter
  skills: SkillManyRelationFilter
  owner: UserWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
  contents: ContentRelateToManyForUpdateInput
  skills: SkillRelateToManyForUpdateInput
  owner: UserRelateToOneForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
  contents: ContentRelateToManyForCreateInput
  skills: SkillRelateToManyForCreateInput
  owner: UserRelateToOneForCreateInput
}

type Image {
  id: ID!
  altText: String
  image: ImageFieldOutput
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  users: User
  contents(where: ContentWhereInput! = {}, orderBy: [ContentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContentWhereUniqueInput): [Content!]
  contentsCount(where: ContentWhereInput! = {}): Int
  owner: User
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ImageWhereUniqueInput {
  id: ID
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  altText: StringFilter
  posts: PostManyRelationFilter
  users: UserWhereInput
  contents: ContentManyRelationFilter
  owner: UserWhereInput
}

input ImageOrderByInput {
  id: OrderDirection
  altText: OrderDirection
}

input ImageUpdateInput {
  altText: String
  image: ImageFieldInput
  posts: PostRelateToManyForUpdateInput
  users: UserRelateToOneForUpdateInput
  contents: ContentRelateToManyForUpdateInput
  owner: UserRelateToOneForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  altText: String
  image: ImageFieldInput
  posts: PostRelateToManyForCreateInput
  users: UserRelateToOneForCreateInput
  contents: ContentRelateToManyForCreateInput
  owner: UserRelateToOneForCreateInput
}

type File {
  id: ID!
  altText: String
  file: FileFieldOutput
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  owner: User
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input FileWhereUniqueInput {
  id: ID
}

input FileWhereInput {
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
  id: IDFilter
  altText: StringFilter
  posts: PostManyRelationFilter
  owner: UserWhereInput
}

input FileOrderByInput {
  id: OrderDirection
  altText: OrderDirection
}

input FileUpdateInput {
  altText: String
  file: FileFieldInput
  posts: PostRelateToManyForUpdateInput
  owner: UserRelateToOneForUpdateInput
}

input FileFieldInput {
  upload: Upload!
}

input FileUpdateArgs {
  where: FileWhereUniqueInput!
  data: FileUpdateInput!
}

input FileCreateInput {
  altText: String
  file: FileFieldInput
  posts: PostRelateToManyForCreateInput
  owner: UserRelateToOneForCreateInput
}

type ContentCategory {
  id: ID!
  name: String
  order: Int
  published: Boolean
  contents(where: ContentWhereInput! = {}, orderBy: [ContentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContentWhereUniqueInput): [Content!]
  contentsCount(where: ContentWhereInput! = {}): Int
  owner: User
}

input ContentCategoryWhereUniqueInput {
  id: ID
}

input ContentCategoryWhereInput {
  AND: [ContentCategoryWhereInput!]
  OR: [ContentCategoryWhereInput!]
  NOT: [ContentCategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  order: IntFilter
  published: BooleanFilter
  contents: ContentManyRelationFilter
  owner: UserWhereInput
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input ContentCategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  order: OrderDirection
  published: OrderDirection
}

input ContentCategoryUpdateInput {
  name: String
  order: Int
  published: Boolean
  contents: ContentRelateToManyForUpdateInput
  owner: UserRelateToOneForUpdateInput
}

input ContentCategoryUpdateArgs {
  where: ContentCategoryWhereUniqueInput!
  data: ContentCategoryUpdateInput!
}

input ContentCategoryCreateInput {
  name: String
  order: Int
  published: Boolean
  contents: ContentRelateToManyForCreateInput
  owner: UserRelateToOneForCreateInput
}

type Content {
  id: ID!
  category: ContentCategory
  title: String
  period: String
  subtitle: String
  state: String
  description: String
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ImageWhereUniqueInput): [Image!]
  imagesCount(where: ImageWhereInput! = {}): Int
  links(where: LinkWhereInput! = {}, orderBy: [LinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LinkWhereUniqueInput): [Link!]
  linksCount(where: LinkWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  published: Boolean
  owner: User
}

input ContentWhereUniqueInput {
  id: ID
}

input ContentWhereInput {
  AND: [ContentWhereInput!]
  OR: [ContentWhereInput!]
  NOT: [ContentWhereInput!]
  id: IDFilter
  category: ContentCategoryWhereInput
  title: StringFilter
  period: StringFilter
  subtitle: StringFilter
  state: StringFilter
  description: StringFilter
  images: ImageManyRelationFilter
  links: LinkManyRelationFilter
  tags: TagManyRelationFilter
  published: BooleanFilter
  owner: UserWhereInput
}

input ContentOrderByInput {
  id: OrderDirection
  title: OrderDirection
  period: OrderDirection
  subtitle: OrderDirection
  state: OrderDirection
  description: OrderDirection
  published: OrderDirection
}

input ContentUpdateInput {
  category: ContentCategoryRelateToOneForUpdateInput
  title: String
  period: String
  subtitle: String
  state: String
  description: String
  images: ImageRelateToManyForUpdateInput
  links: LinkRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  published: Boolean
  owner: UserRelateToOneForUpdateInput
}

input ContentCategoryRelateToOneForUpdateInput {
  create: ContentCategoryCreateInput
  connect: ContentCategoryWhereUniqueInput
  disconnect: Boolean
}

input ContentUpdateArgs {
  where: ContentWhereUniqueInput!
  data: ContentUpdateInput!
}

input ContentCreateInput {
  category: ContentCategoryRelateToOneForCreateInput
  title: String
  period: String
  subtitle: String
  state: String
  description: String
  images: ImageRelateToManyForCreateInput
  links: LinkRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  published: Boolean
  owner: UserRelateToOneForCreateInput
}

input ContentCategoryRelateToOneForCreateInput {
  create: ContentCategoryCreateInput
  connect: ContentCategoryWhereUniqueInput
}

type SkillCategory {
  id: ID!
  name: String
  icon: String
  order: Int
  published: Boolean
  skills(where: SkillWhereInput! = {}, orderBy: [SkillOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SkillWhereUniqueInput): [Skill!]
  skillsCount(where: SkillWhereInput! = {}): Int
  owner: User
}

input SkillCategoryWhereUniqueInput {
  id: ID
}

input SkillCategoryWhereInput {
  AND: [SkillCategoryWhereInput!]
  OR: [SkillCategoryWhereInput!]
  NOT: [SkillCategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  icon: StringNullableFilter
  order: IntFilter
  published: BooleanFilter
  skills: SkillManyRelationFilter
  owner: UserWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input SkillCategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  icon: OrderDirection
  order: OrderDirection
  published: OrderDirection
}

input SkillCategoryUpdateInput {
  name: String
  icon: String
  order: Int
  published: Boolean
  skills: SkillRelateToManyForUpdateInput
  owner: UserRelateToOneForUpdateInput
}

input SkillCategoryUpdateArgs {
  where: SkillCategoryWhereUniqueInput!
  data: SkillCategoryUpdateInput!
}

input SkillCategoryCreateInput {
  name: String
  icon: String
  order: Int
  published: Boolean
  skills: SkillRelateToManyForCreateInput
  owner: UserRelateToOneForCreateInput
}

type Skill {
  id: ID!
  category: SkillCategory
  title: String
  description: String
  score: Int
  scoreMax: Int
  href: String
  links(where: LinkWhereInput! = {}, orderBy: [LinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LinkWhereUniqueInput): [Link!]
  linksCount(where: LinkWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  published: Boolean
  owner: User
}

input SkillWhereUniqueInput {
  id: ID
}

input SkillWhereInput {
  AND: [SkillWhereInput!]
  OR: [SkillWhereInput!]
  NOT: [SkillWhereInput!]
  id: IDFilter
  category: SkillCategoryWhereInput
  title: StringFilter
  description: StringFilter
  score: IntFilter
  scoreMax: IntFilter
  href: StringFilter
  links: LinkManyRelationFilter
  tags: TagManyRelationFilter
  published: BooleanFilter
  owner: UserWhereInput
}

input SkillOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  score: OrderDirection
  scoreMax: OrderDirection
  href: OrderDirection
  published: OrderDirection
}

input SkillUpdateInput {
  category: SkillCategoryRelateToOneForUpdateInput
  title: String
  description: String
  score: Int
  scoreMax: Int
  href: String
  links: LinkRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  published: Boolean
  owner: UserRelateToOneForUpdateInput
}

input SkillCategoryRelateToOneForUpdateInput {
  create: SkillCategoryCreateInput
  connect: SkillCategoryWhereUniqueInput
  disconnect: Boolean
}

input SkillUpdateArgs {
  where: SkillWhereUniqueInput!
  data: SkillUpdateInput!
}

input SkillCreateInput {
  category: SkillCategoryRelateToOneForCreateInput
  title: String
  description: String
  score: Int
  scoreMax: Int
  href: String
  links: LinkRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  published: Boolean
  owner: UserRelateToOneForCreateInput
}

input SkillCategoryRelateToOneForCreateInput {
  create: SkillCategoryCreateInput
  connect: SkillCategoryWhereUniqueInput
}

type Link {
  id: ID!
  title: String
  href: String
  icon: String
  target: String
  published: Boolean
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  contents(where: ContentWhereInput! = {}, orderBy: [ContentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContentWhereUniqueInput): [Content!]
  contentsCount(where: ContentWhereInput! = {}): Int
  skills(where: SkillWhereInput! = {}, orderBy: [SkillOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SkillWhereUniqueInput): [Skill!]
  skillsCount(where: SkillWhereInput! = {}): Int
  owner: User
}

input LinkWhereUniqueInput {
  id: ID
}

input LinkWhereInput {
  AND: [LinkWhereInput!]
  OR: [LinkWhereInput!]
  NOT: [LinkWhereInput!]
  id: IDFilter
  title: StringFilter
  href: StringFilter
  icon: StringFilter
  target: StringFilter
  published: BooleanFilter
  users: UserManyRelationFilter
  contents: ContentManyRelationFilter
  skills: SkillManyRelationFilter
  owner: UserWhereInput
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input LinkOrderByInput {
  id: OrderDirection
  title: OrderDirection
  href: OrderDirection
  icon: OrderDirection
  target: OrderDirection
  published: OrderDirection
}

input LinkUpdateInput {
  title: String
  href: String
  icon: String
  target: String
  published: Boolean
  users: UserRelateToManyForUpdateInput
  contents: ContentRelateToManyForUpdateInput
  skills: SkillRelateToManyForUpdateInput
  owner: UserRelateToOneForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input LinkUpdateArgs {
  where: LinkWhereUniqueInput!
  data: LinkUpdateInput!
}

input LinkCreateInput {
  title: String
  href: String
  icon: String
  target: String
  published: Boolean
  users: UserRelateToManyForCreateInput
  contents: ContentRelateToManyForCreateInput
  skills: SkillRelateToManyForCreateInput
  owner: UserRelateToOneForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createAboutMe(data: AboutMeCreateInput!): AboutMe
  createAboutMes(data: [AboutMeCreateInput!]!): [AboutMe]
  updateAboutMe(where: AboutMeWhereUniqueInput!, data: AboutMeUpdateInput!): AboutMe
  updateAboutMes(data: [AboutMeUpdateArgs!]!): [AboutMe]
  deleteAboutMe(where: AboutMeWhereUniqueInput!): AboutMe
  deleteAboutMes(where: [AboutMeWhereUniqueInput!]!): [AboutMe]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  createFile(data: FileCreateInput!): File
  createFiles(data: [FileCreateInput!]!): [File]
  updateFile(where: FileWhereUniqueInput!, data: FileUpdateInput!): File
  updateFiles(data: [FileUpdateArgs!]!): [File]
  deleteFile(where: FileWhereUniqueInput!): File
  deleteFiles(where: [FileWhereUniqueInput!]!): [File]
  createContentCategory(data: ContentCategoryCreateInput!): ContentCategory
  createContentCategories(data: [ContentCategoryCreateInput!]!): [ContentCategory]
  updateContentCategory(where: ContentCategoryWhereUniqueInput!, data: ContentCategoryUpdateInput!): ContentCategory
  updateContentCategories(data: [ContentCategoryUpdateArgs!]!): [ContentCategory]
  deleteContentCategory(where: ContentCategoryWhereUniqueInput!): ContentCategory
  deleteContentCategories(where: [ContentCategoryWhereUniqueInput!]!): [ContentCategory]
  createContent(data: ContentCreateInput!): Content
  createContents(data: [ContentCreateInput!]!): [Content]
  updateContent(where: ContentWhereUniqueInput!, data: ContentUpdateInput!): Content
  updateContents(data: [ContentUpdateArgs!]!): [Content]
  deleteContent(where: ContentWhereUniqueInput!): Content
  deleteContents(where: [ContentWhereUniqueInput!]!): [Content]
  createSkillCategory(data: SkillCategoryCreateInput!): SkillCategory
  createSkillCategories(data: [SkillCategoryCreateInput!]!): [SkillCategory]
  updateSkillCategory(where: SkillCategoryWhereUniqueInput!, data: SkillCategoryUpdateInput!): SkillCategory
  updateSkillCategories(data: [SkillCategoryUpdateArgs!]!): [SkillCategory]
  deleteSkillCategory(where: SkillCategoryWhereUniqueInput!): SkillCategory
  deleteSkillCategories(where: [SkillCategoryWhereUniqueInput!]!): [SkillCategory]
  createSkill(data: SkillCreateInput!): Skill
  createSkills(data: [SkillCreateInput!]!): [Skill]
  updateSkill(where: SkillWhereUniqueInput!, data: SkillUpdateInput!): Skill
  updateSkills(data: [SkillUpdateArgs!]!): [Skill]
  deleteSkill(where: SkillWhereUniqueInput!): Skill
  deleteSkills(where: [SkillWhereUniqueInput!]!): [Skill]
  createLink(data: LinkCreateInput!): Link
  createLinks(data: [LinkCreateInput!]!): [Link]
  updateLink(where: LinkWhereUniqueInput!, data: LinkUpdateInput!): Link
  updateLinks(data: [LinkUpdateArgs!]!): [Link]
  deleteLink(where: LinkWhereUniqueInput!): Link
  deleteLinks(where: [LinkWhereUniqueInput!]!): [Link]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  aboutMes(where: AboutMeWhereInput! = {}, orderBy: [AboutMeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AboutMeWhereUniqueInput): [AboutMe!]
  aboutMe(where: AboutMeWhereUniqueInput!): AboutMe
  aboutMesCount(where: AboutMeWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ImageWhereUniqueInput): [Image!]
  image(where: ImageWhereUniqueInput!): Image
  imagesCount(where: ImageWhereInput! = {}): Int
  files(where: FileWhereInput! = {}, orderBy: [FileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FileWhereUniqueInput): [File!]
  file(where: FileWhereUniqueInput!): File
  filesCount(where: FileWhereInput! = {}): Int
  contentCategories(where: ContentCategoryWhereInput! = {}, orderBy: [ContentCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContentCategoryWhereUniqueInput): [ContentCategory!]
  contentCategory(where: ContentCategoryWhereUniqueInput!): ContentCategory
  contentCategoriesCount(where: ContentCategoryWhereInput! = {}): Int
  contents(where: ContentWhereInput! = {}, orderBy: [ContentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContentWhereUniqueInput): [Content!]
  content(where: ContentWhereUniqueInput!): Content
  contentsCount(where: ContentWhereInput! = {}): Int
  skillCategories(where: SkillCategoryWhereInput! = {}, orderBy: [SkillCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SkillCategoryWhereUniqueInput): [SkillCategory!]
  skillCategory(where: SkillCategoryWhereUniqueInput!): SkillCategory
  skillCategoriesCount(where: SkillCategoryWhereInput! = {}): Int
  skills(where: SkillWhereInput! = {}, orderBy: [SkillOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SkillWhereUniqueInput): [Skill!]
  skill(where: SkillWhereUniqueInput!): Skill
  skillsCount(where: SkillWhereInput! = {}): Int
  links(where: LinkWhereInput! = {}, orderBy: [LinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LinkWhereUniqueInput): [Link!]
  link(where: LinkWhereUniqueInput!): Link
  linksCount(where: LinkWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
